# Copyright (c) 2006--2012 Yoshihiro Kawamata
# All rights reserved.
# 
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are
# met:
# 
#   * Redistributions of source code must retain the above copyright
#     notice, this list of conditions and the following disclaimer.
# 
#   * Redistributions in binary form must reproduce the above copyright
#     notice, this list of conditions and the following disclaimer in
#     the documentation and/or other materials provided with the
#     distribution.
# 
#   * Neither the name of Yoshihiro Kawamata nor the names of its
#     contributors may be used to endorse or promote products derived
#     from this software without specific prior written permission.
# 
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
# A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
# OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
# SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
# LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
# DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
# THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.


#====================
# interim rc file for LiveCD
#
# KAWAMATA, Yoshihiro
# kaw@on.rim.or.jp
#

#====================
# isgreater ... compare two strings as big non-negative integers
#
# ksh can handle integer as 32bit signed :  -2147483648 ... 2147483647
# This function compares two "string form" integers over 32bit int.
#
# usage: isgreater X Y
# return value: -2 ... string is not form of non-negative integer
#               -1 ... missing argument(s)
#                0 ... X is greater than Y.
#                1 ... X is NOT greater than Y.
#
function isgreater {
    # check presence of arguments
    #
    [ $# -lt 2 ] && return -- -1

    x=$1
    y=$2

    # Are arguments both form of positive integer or zero?
    #
    case "$x" in
        0|[1-9]*([0-9])) :            ;; # ok, do nothing
                      *) return -- -2 ;; # ng, string is positive integer nor zero.
    esac
    case "$y" in
        0|[1-9]*([0-9])) :            ;; # ok, do nothing
                      *) return -- -2 ;; # ng, string is positive integer nor zero.
    esac

    # Compare them
    #
    if [ ${#x} -gt ${#y} ]; then
        return 0
    elif [ ${#x} -eq ${#y} ]; then
        if /fuguita/bin/test $x \> $y; then # string compare
            return 0
        else
            return 1
        fi
    else
        return 1
    fi
}

#====================
# Active code from here
#====================
# setup file systems;
#   1. /         ...  rd - ram disk attached to kernel
#   2. /sysmedia ...  CD or USB flashdrive - containing FFS system image
#   3. /fuguita  ...  vnode disk - mounted FFS system image
#   4. /mfs      ...  user-modifiable file system
#

init_args="$@"

cd /

#-------------------------------
# create fstab then mount by it
#
mount -w /dev/rd0a /
: > /boottmp/boot_starts

#----------------------------
# detect boot-failure loop
#
if [ -r /boottmp/boot_tries ]; then
    read boot_tries < /boottmp/boot_tries
    boot_tries=$((boot_tries+1))
else
    boot_tries=1
fi

if [ $boot_tries -ge 10 ]; then
    echo
    echo 'Boot retries exceeded.'
    echo -n 'emergency stop ->'; read dummy
    boot_tries=0
fi
echo $boot_tries > /boottmp/boot_tries

#-------------------------------
# scan devices
# searching for where FuguIta is stored in
#
def_rdev=''
def_udev=''
disks=''

# get disk device names
# and disk unique ID
#
disknames=`sysctl -n hw.disknames`
saveIFS="$IFS"; IFS=','
set -- $disknames
IFS="$saveIFS"
disknames=$@

for disk_name_id in $disknames; do
    # split one disk unit
    # into its name and DUID
    saveIFS="$IFS"; IFS=':'
    set -- $disk_name_id
    IFS="$saveIFS"
    rdev="$1"

    disk=''
    case X"$rdev"X in
        # ignoring fd,
        # because accessing some floppy drives cause
        # endless "timeout..." responses when disk is
        # absent.
        X[csw]d[0-9]X)
            if mount -r /dev/${rdev}a /mnt 2>/dev/null ; then
                if [ -d /mnt/usr/fuguita -o \
                     -f /mnt/fuguita.ffsimg ]; then
                    disk=" *${rdev}a"
                    if [ X${def_rdev} = X ]; then
                        def_rdev=${rdev}a
                    fi
                fi
                umount /mnt
            fi
            if mount -r /dev/${rdev}i /mnt 2>/dev/null ; then
                set -- /mnt/ISO/FuguIta-?.?-?????????.iso
                if [ ! X"$1" = X -a \
                     ! X"$1" = 'X/mnt/ISO/FuguIta-?.?-?????????.iso' ] ;then
                    disk="$disk *${rdev}i"
                    if [ X${def_rdev} = X ]; then
                        def_rdev=${rdev}i
                    fi
                fi
                umount /mnt
            fi
            ;;
    esac
    case X"$rdev"X in
        X[sw]d[0-9]X)
            if mount -r /dev/${rdev}d /mnt 2>/dev/null ; then
                if [ -d /mnt/livecd-config ]; then
                    disk="$disk +${rdev}d"
                    def_udev=${rdev}d
                fi
                umount /mnt
            fi
            ;;
    esac
    if [ X"$disk" = X ]; then
        disks="$disks $rdev"
    else
        disks="$disks$disk"
    fi
done
rdev=''

if [ ! X"$def_udev" = X ] &&
    mount -r /dev/${def_udev} /mnt; then
    if [ -r /mnt/noasks ]; then
        . /mnt/noasks
    fi
    umount /mnt
fi

#-------------------------------
# ask which system-stored device is.
#
echo '
============================================
=     ______               __   _
=    / ____/              |  |_| |__
=   / /____  ______  __  _|  /_   _/_____
=  / ___/ / / / __ \/ / / |  | | | /  _  |
= / /  / /_/ / /_/ / /_/ /|  | | |_| (_) |__
=/_/   \____/\__  /\____/ |__| \___/____/__/
=            __/ /
=           /___/
=
= Welcome to FuguIta - OpenBSD LiveCD!
=          http://kaw.ath.cx/openbsd/?FuguIta
=============================================
'
#-------------------------------
# wait for cancelling non-interactive boot
#
if [ "X${noask_rdev}${noask_umem}${noask_setup_rw_mode}${noask_confdir}" != X ]; then
    trap "unset noask_rdev noask_umem noask_setup_rw_mode noask_confdir; echo ' ... cancelled'" 2
    echo "Press ^C to cancel non-interactive boot"
    sleep 5
    echo
fi
trap - 2

echo "disks:$disks"
if [ X"$def_rdev" = X ]; then
    echo    "Cannot find disk to boot FuguIta...";
    echo -n "Anyway, disk to try booting? -> "; read ans
else
    echo -n "Which is FuguIta's operating device? [${def_rdev}] -> "
    if [ X = X"$noask_rdev" ]; then
        read ans
    else
        echo $noask_rdev
        ans="$noask_rdev"
        noask_rdev=''
    fi
fi

if [ X"$ans" = X ]; then
    rdev=$def_rdev
else
    rdev=$ans
fi

#-------------------------------
# mount system-stored device
#
    vn_devname="vnd5"
vn_devname_iso="vnd4"

/sbin/mount -r /dev/${rdev} /fuguita || exit
if [ -f /fuguita/fuguita.ffsimg ]; then
    /sbin/umount /fuguita
    /sbin/mount -r /dev/${rdev} /sysmedia
    /sbin/vnconfig ${vn_devname} /sysmedia/fuguita.ffsimg
    /sbin/mount -r /dev/${vn_devname}a /fuguita
elif [ -d /fuguita/ISO ]; then
    /sbin/umount /fuguita
    /sbin/mount -r /dev/${rdev} /sysmedia
    set -- /sysmedia/ISO/FuguIta-?.?-?????????.iso
    if [ $# -gt 1 ]; then
        shift $(($#-1))
    fi
    if [ ! X"$1" = X -a \
         ! X"$1" = 'X/sysmedia/ISO/FuguIta-?.?-?????????.iso' ] ;then
        umount /sysmedia
        mount /dev/${rdev} /sysmedia-iso
        /sbin/vnconfig ${vn_devname_iso} /sysmedia-iso/ISO/${1##*/}
        /sbin/mount -r /dev/${vn_devname_iso}a /sysmedia
        /sbin/vnconfig ${vn_devname} /sysmedia/fuguita.ffsimg
        /sbin/mount -r /dev/${vn_devname}a /fuguita
    fi
fi

#-------------------------------
# set mfs size
#
memmax=1023
memmin=10
usermem=`sysctl -n hw.usermem`
echo
echo "  user memory: $usermem bytes"

# 2147483647 is 2^31-1 ... ksh int max
#
isgreater $usermem 2147483647
if [ $? -eq 0 ]; then
    usermem=2147483647
fi

usermem=$((usermem/1024/1024))
 defmem=$(($usermem/2))

if [ $memmax -lt $usermem ]; then
    usermem=$memmax
fi
if [ $memmax -lt $defmem ]; then
    defmem=$memmax
fi

echo "mfs available: ${memmin}MB to ${usermem}MB"
echo -n "[default: ${defmem}MB] -> "
if [ X = X"$noask_umem" ]; then
    read umem
else
    echo $noask_umem
    umem="$noask_umem"
    noask_umem=''
fi

#-------------------------------
# check mfs size
#
if [ X"$umem" = X ]; then
    echo "set mfs size to default: ${defmem}MB"
    umem=$defmem
elif [ $umem -lt $memmin ]; then
    echo "set mfs size to minimum limit: ${memmin}MB"
    umem=$memmin
elif [ $memmax -lt $umem ]; then
    echo "set mfs size to maximum limit: ${memmax}MB"
    umem=$memmax
else
    echo "set mfs size to ${umem}MB"
fi

#-------------------------------
# mount user-writable file system
#
mfs_alloc_blk=$((1024*2*$umem))
mfs_inode_dens=$(($umem*1024*1024/100000))
if [ $mfs_inode_dens -gt 16384 ]; then
    mfs_inode_dens=16384
elif [ $mfs_inode_dens -lt 512 ]; then
    mfs_inode_dens=512
fi
/fuguita/sbin/mount_mfs -o rw,async -b 4096 -f 512 -i $mfs_inode_dens -s $mfs_alloc_blk swap /mfs || exit

#-------------------------------
# generate fstab from current
# mounting status
#
/sbin/mount | \
while read ln; do
    set - $ln
    case X"$3"X in
        X/X)
            echo /dev/rd0a / ffs rw 0 0 ;;
        X/fuguitaX|X/sysmediaX)
            echo $1 $3 $5 ro 0 0 ;;
        X/mfsX)
            echo swap $3 $5 rw,async,-b=4096,-f=512,-i=$mfs_inode_dens,-s=$mfs_alloc_blk 0 0 ;;
        *)
            echo $1 $3 $5 defaults 0 0 ;;
    esac
done >/boottmp/fstab

#----------------------------
# re-link bin dirs to System device
#
/fuguita/bin/rm -rf /bin /sbin
/fuguita/bin/ln -sf fuguita/bin fuguita/sbin .

while :; do

    #----------------------------
    # detect select-mode failure loop
    #
    if [ "X$select_mode_tries" = X ]; then
        select_mode_tries=1
    else
        select_mode_tries=$(($select_mode_tries+1))
    fi

    if [ $select_mode_tries -ge 10 ]; then
        echo
        echo 'Too many boot retries.'
        echo -n 'emergency stop ->'; read dummy
        unset select_mode_tries
    fi

    #----------------------------
    # boot modes
    #
    echo
    echo 'Select boot mode;'
    echo '  0: fresh boot (normal)'
    echo '  1: fresh boot (lower memory, faster boot than mode 0)'
    echo '  2: fresh boot (works only on mfs)'
    echo '  3: retrieve user data from USB flash memory'
    echo '  4: retrieve user data from floppy disk'
    echo '  5: interactive shell for debugging'
    echo -n '->'
    if [ X = X"$noask_setup_rw_mode" ]; then
        read setup_rw_mode
    else
        echo $noask_setup_rw_mode
        setup_rw_mode="$noask_setup_rw_mode"
        noask_setup_rw_mode=''
    fi

    case X"$setup_rw_mode" in

        #-----------------------
        #-----------------------
        # System Storage only mode
        #-----------------------
        #-----------------------
        #
        X[012])
        if [ X"$setup_rw_mode" = X0 ]; then
            echo "manual"
        elif [ X"$setup_rw_mode" = X1 ]; then
            echo "manual_less_mfs"
        elif [ X"$setup_rw_mode" = X2 ]; then
            echo "manual_more_mfs"
        fi > /boottmp/boot_mode

        #-------------------------------------
        # copy System Storage contents to rw-able mfs
        #
        echo
        echo "Running manual setup."
        echo -n "Copying system files to /mfs ... "
        cd /mfs
        if [ X"$setup_rw_mode" = X0 ]; then
            (cd ../fuguita && tar cf - altroot etc home tmp root var) | tar xpf -
        elif [ X"$setup_rw_mode" = X1 ]; then
            (cd ../fuguita && tar cf - altroot etc home tmp root var) \
            | tar -x \
                  -p \
                  -f - \
                  -s '|^etc/X11/.*||' \
                  -s '|^etc/firmware.*||' \
                  -s '|^var/db/pkg/.*||' \
                  -s '|^var/www/htdocs/.*||'
        elif [ X"$setup_rw_mode" = X2 ]; then
            (cd ../fuguita && pax -rwpe . /mfs/. && cd /)
        fi
        echo "done"

        #-----------------------
        # symlink from / to mfs
        #
        cd /
        rm -rf /tmp
        mv /etc /bootetc
        ln -sf mfs/* . 2>/dev/null
        cp /boottmp/fstab /etc

        #-------------------------------------------
        # symlink rest of contents from / to System Storage
        #
        ln -s fuguita/* .     2>/dev/null
        #ln -s fuguita/.??* . 2>/dev/null ; # Maybe not needed

        if [ X"$setup_rw_mode" = X0 ]; then
            #-------------------------------------------
            # extract pre-build symlinks archive
            # or lndir from /mfs/usr to /fuguita/usr
            #
            if [ -r /fuguita/usr/fuguita/etc/mode0symlinks.cpio.gz \
                 -a ! -e /boottmp/force_lndir ]; then
                echo -n "Extracting symlinks from /mfs to /fuguita ... "
                (cd /mfs && pax -rzpe -f /fuguita/usr/fuguita/etc/mode0symlinks.cpio.gz)
            else
                echo -n "Linking files from /mfs to /fuguita ... "
                mkdir /mfs/usr && cd /mfs/usr && lndir -s /fuguita/usr

                #-------------------------------------------
                # KLUDGE: Re-lndir under /usr/local/lib/X11/fonts
                #
                if [ -h /mfs/usr/local/lib/X11/fonts ]; then
                    rm /mfs/usr/local/lib/X11/fonts
                    mkdir -p /mfs/usr/local/lib/X11/fonts
                    (cd /mfs/usr/local/lib/X11/fonts && lndir -s /fuguita/usr/local/lib/X11/fonts)
                fi
            fi

            #-------------------------------------------
            # set time stamp of dirs containing font files
            # (to avoid re-build font caches)
            #
            (cd /mfs && for d in usr/*/lib/X11/fonts/*; do touch -cm -r /fuguita/$d $d; done)

            #-------------------------------------------
            # Then, copy again for trivial dirs
            #
            for d in \
                usr/libexec/auth \
                usr/local/lib/wnn
              do
              if [ -d /fuguita/$d ]; then
                  rm -rf /mfs/$d && cd `dirname /fuguita/$d` && pax -rwpe `basename $d` `dirname /mfs/$d`
              fi
            done

            #-------------------------------------------
            # Next, copy some files
            #
            for f in \
                usr/local/info/dir \
                usr/local/share/info/dir
              do
              if [ -f /fuguita/$f ]; then
                  rm -f /mfs/$f && cp -p /fuguita/$f /mfs/$f
              fi
            done

            cd / && ln -sf mfs/usr .
        elif [ X"$setup_rw_mode" = X1 ]; then
            (cd /mfs/etc/X11        && lndir -s /fuguita/etc/X11)
            (cd /mfs/etc            && ln -s /fuguita/etc/firmware .)
            (cd /mfs/var/db/pkg     && lndir -s /fuguita/var/db/pkg)
            (cd /mfs/var/www/htdocs && lndir -s /fuguita/var/www/htdocs)
        elif [ X"$setup_rw_mode" = X2 ]; then
            umount -f /fuguita
            grep -v '/fuguita' /etc/fstab > /etc/fstab.tmp
            mv /etc/fstab.tmp /etc/fstab

            if [ -f /sysmedia/fuguita.ffsimg ]; then
                vnconfig -u ${vn_devname}
                umount -f /sysmedia
                grep -v '/sysmedia' /etc/fstab > /etc/fstab.tmp
                mv /etc/fstab.tmp /etc/fstab
            fi
        fi

        echo "done"

        #========================================
        # setup in /etc (network etc...)
        #
        echo
        echo "Keyboard type;"
        while :; do
            kbd -l | sed -e '1,3d; /^$/d' | sort | paste - - - -
            echo -n '-> '; read kbtype
            if kbd $kbtype; then
                echo $kbtype > /etc/kbdtype
                break
            fi
            echo
        done

        echo
        echo "Please wait ... "
        until passwd root
          do
          echo "passwd failed, Try again."
        done

        echo
        echo -n 'host name (without domain) -> '; read myhost
        if [ X"$myhost" = X ]; then
            myhost=fuguita
        fi
        echo $myhost >/etc/myname

        #-----------------------
        # Network configuration
        #
        ifconfig_out=`ifconfig -a`
        nicifs=`echo "$ifconfig_out" | grep ' mtu 1500$' | cut -d: -f1`
        echo
        if [ X"$nicifs" = X ]; then
            echo 'No available network interfaces found.'
            ipv='n'
        else
            echo -n 'IP version(s) to use [n, 4, 6 or 46]-> '; read ipv
            set - $nicifs
            nicifs="$@"
            defnic="$1"
        fi

        case X"$ipv" in
            #-----------------------
            # IP-generic configs
            #
            X*[46]*)
                echo
                echo "==[ifconfig -a]========================="
                echo "$ifconfig_out"
                echo "========================================"
                echo "Available network interface(s): $nicifs"
                echo -n "network interface to setup [$defnic] -> "; read mynic
                if [ X"$mynic" = X ]; then
                    mynic=$defnic
                fi
                : > /etc/hostname.$mynic
                chmod 0640 /etc/hostname.$mynic

                echo
                echo -n "FQDN of this host -> ${myhost}."; read mydomain
                if [ ! X"$mydomain" = X ]; then
                    myfqdn=${myhost}.${mydomain}
                    echo "search $mydomain" > /etc/resolv.conf
                    echo $myfqdn > /etc/myname
                fi

                echo '127.0.0.1 localhost'  > /etc/hosts
                echo '::1       localhost' >> /etc/hosts

                echo
                echo 'DNS setup;'
                echo '  Manual : Enter up to three IPv4/IPv6 addresses, separated by spaces'
                echo '  DHCP   : Just press ENTER .'
                echo '  no DNS : Enter "none".'
                echo -n '-> '; read mydns
                mydns=`echo -n $mydns | tr -cs '0-9A-Za-z:.%' ' '`
                if [ X"$mydns" = X -o X"$mydns" = Xdhcp ]; then
                    echo "lookup file bind" >> /etc/resolv.conf

                    #-----------------------
                    # IPv4 configs
                    #
                    case X"$ipv" in
                        X*4*)
                            echo "dhcp" >> /etc/hostname.$mynic
                            ;;
                    esac
                else
                    if [ X"$mydns" == Xnone ]; then
                        echo "lookup file"      >> /etc/resolv.conf
                    else
                        echo "lookup file bind" >> /etc/resolv.conf
                        set -- $mydns
                        [ ! X"$1" = X ] && echo "nameserver $1"          >> /etc/resolv.conf
                        [ ! X"$2" = X ] && shift && echo "nameserver $1" >> /etc/resolv.conf
                        [ ! X"$2" = X ] && shift && echo "nameserver $1" >> /etc/resolv.conf
                    fi

                    #-----------------------
                    # IPv4 configs
                    #
                    case X"$ipv" in
                        X*4*)
                            echo
                            echo -n 'IPv4 addr of this host -> '; read myv4addr
                            echo -n 'netmask                -> '; read mynetmask
                            echo -n 'default route          -> '; read mygw

                            echo "inet $myv4addr $mynetmask NONE" >> /etc/hostname.$mynic
                            echo "$mygw" > /etc/mygate
                            echo "$myv4addr $myfqdn ${myfqdn%%.*}" >> /etc/hosts

                            echo 'net.inet.ip.forwarding=0'  >> /etc/sysctl.conf
                            echo 'net.inet.ip.mforwarding=0' >> /etc/sysctl.conf
                            ;;
                    esac
                fi

                #-----------------------
                # IPv6 configs
                #
                case X"$ipv" in
                    X*6*)
                        echo 'rtsol' >> /etc/hostname.$mynic
                        echo "rtsold_flags=$mynic" >> /etc/rc.conf.local
                        echo 'net.inet6.ip6.forwarding=0'   >> /etc/sysctl.conf
                        echo 'net.inet6.ip6.mforwarding=0'  >> /etc/sysctl.conf
                        echo 'net.inet6.ip6.accept_rtadv=1' >> /etc/sysctl.conf
                        echo 'net.inet6.icmp6.rediraccept=1'>> /etc/sysctl.conf
                        ;;
                esac
                ;;
        esac

        # now disable to use prepared keys;
        #
        # To use this, uncomment following comment lines
        # then remove or comment 'ans=y' line
        #
         echo
        #echo -n 'Generate cryptographic keys [Y/n] -> '; read ans
        #
        ans=y; # now force to generate keys

        case X"$ans" in
            X[Nn]*)
                :
            ;;
            *)
            # echo 'Generation of SSH and isakmpd keys take some time while booting.'
            # sleep 3
            rm -f /etc/ssh/*_key* /etc/isakmpd/local.pub /etc/isakmpd/private/local.key
            ;;
        esac

        # insert a code fragment to unmount /mfs safely
        #
        UMOUNT_MFS_MSG='=== to unmount /mfs safely ==='
        if fgrep -q -- "$UMOUNT_MFS_MSG" /etc/rc.shutdown; then
            :
        else
            cat <<EOT >>/etc/rc.shutdown

# $UMOUNT_MFS_MSG
#
umount -f /mfs
EOT
        fi

        break
        ;;

        #-----------------------
        #-----------------------
        # Restore from USB flash mode
        #-----------------------
        #-----------------------
        #
        X3)
        echo "usbflash" > /boottmp/boot_mode

        #-----------------------
        # search for saved data
        #
        usb_sd=''
        for rdev in {sd,wd}{4,3,2,1,0}d; do
            if mount -r /dev/${rdev} /mnt 2>/dev/null ; then
                if [ -d /mnt/livecd-config ]; then
                    usb_sd=${rdev}
                    umount /mnt
                    break;
                fi
                umount /mnt
            fi
        done

        if [ X"$usb_sd" = X ]; then
            echo
            echo 'cannot find directory with saved data'
            continue
        fi

        usb_devname=/dev/${usb_sd}
        echo "$usb_devname" > /boottmp/boot_restore_devname

        #-----------------------
        # (User's choice in the future(?))
        #-----------------------

        #-----------------------
        # mount user's storage
        #
        usb_devname=`cat /boottmp/boot_restore_devname`
        if mount -r "$usb_devname" /mnt; then
            #-----------------------
            # select config files
            #
            if [ ! -d /mnt/livecd-config ]; then
                echo
                echo "cannot find config dir on $usb_devname"
                umount "$usb_devname"
                continue
            fi

            while :; do
                echo
                echo "$usb_devname : available data;"
                (cd /mnt/livecd-config && echo ; ls -C; echo )
                echo -n 'config name -> '
                if [ X = X"$noask_confdir" ]; then
                    read confdir
                else
                    echo $noask_confdir
                    confdir="$noask_confdir"
                    noask_confdir=''
                fi

                if [ -d "/mnt/livecd-config/$confdir" ]; then
                    echo "$confdir" > /boottmp/boot_user_config
                    break
                else
                    echo 'cannot find such data'
                    umount "$usb_devname"
                    continue 2
                fi
            done

            #-----------------------
            # copying to mfs
            #
            echo
            echo "Copying files from flash to mfs ... "
            cd /mnt/livecd-config/$confdir && pax -rwpe . /mfs
            echo "done"

            #-----------------------
            # symlink from / to mfs
            #
            cd /
            rm -rf /tmp
            mv /etc /bootetc
            ln -sf mfs/* .
            cp /boottmp/fstab /etc

            #-------------------------------------------
            # symlink rest of contents from / to System Storage
            #
            ln -s fuguita/* .     2>/dev/null
            #ln -s fuguita/.??* . 2>/dev/null ; # Maybe not needed

            umount /mnt
        else
            echo "Failed to mount user's storage"
            continue
        fi

        break
        ;;

        #-----------------------
        #-----------------------
        # Restore from floppy mode
        #-----------------------
        #-----------------------
        #
        X4)
        echo "floppy" > /boottmp/boot_mode

        #-----------------------
        # copying to mfs
        #
        if mount -r /dev/fd0a /mnt; then
            if [ -r /mnt/livecd-retr.sh.inc ]; then
                cp -p /boottmp/livecd-retr.sh.inc /boottmp/livecd-retr.sh.inc.orig
                cat /mnt/livecd-retr.sh.inc > /boottmp/livecd-retr.sh.inc
                .  /boottmp/livecd-retr.sh.inc
                umount /mnt
            else
                echo
                echo "Retrieval script not found on fd0a."
                umount /mnt
                continue
            fi
        else
            echo
            echo "Failed to read /mnt/livecd-config.tar.gz on /dev/fd0a"
            continue
        fi

        break
        ;;

        #-----------------------
        #-----------------------
        # Interactive shell mode
        #-----------------------
        #-----------------------
        #
        X5)
        echo "intr-shell" > /boottmp/boot_mode
        echo
        echo "==INTERACTIVE SHELL MODE================
=
= An interactive shell invoked for manual operation.
= Now, just System Storage mounted on /fuguita.
=
= After exit this shell, select boot mode again.
=
========================================"
        PATH="/fuguita/sbin:/fuguita/bin" /fuguita/bin/sh
        ;;

        *) echo "What?" ;;
    esac
done

#====================
# remove unused directories / files
#
rm -f /boot.catalog /cdboot /cdbr /rr_moved
rmdir /sysmedia-iso 2> /dev/null

echo "========================================"
date > /boottmp/boot_livecd_rc_ends

#========================================
# chain original /etc/rc
#

exec /bin/ksh /etc/rc "$init_args"
